# Base stage
FROM node:16 AS base-stage

# Sets the working directory inside the container to /usr/src/app.
WORKDIR /usr/src/app

# Copies package.json and package-lock.json (if present) to the working directory in the container. 
# This is done to take advantage of Docker's layer caching. 
# By copying these files separately and running npm ci before copying the rest of the app's source code, 
# Docker can cache the installed node modules as a separate layer, improving build times when the source code changes but dependencies do not.
COPY package*.json ./
RUN npm ci
COPY . .

# Build stage
FROM base-stage AS build-stage

# ENV REACT_APP_API_BASE_URL=http://localhost:3001/api/
RUN npm run build

# Production stage
FROM nginx:1.20-alpine AS production-stage

# Copies the built React app from the build-stage into the Nginx server's root directory. 
# This is where Nginx expects to find the files to serve.
COPY --from=build-stage /usr/src/app/build /usr/share/nginx/html

# Starts Nginx with the daemon off command to ensure it stays in the foreground. 
# Docker containers need the main process to run in the foreground; otherwise, the container would stop immediately after start.
CMD ["nginx", "-g", "daemon off;"]


# In this Dockerfile, Nginx serves the static files generated by npm run build. 
# The nginx:1.20-alpine image listens on port 80 by default. 
# To access the app from outside the Docker container, you'd map a port from your host to port 80 in the container 
# using Docker's -p or within a docker-compose.yml file. This mapping makes your app accessible at the specified host port, 
# routing through Nginx inside the container.